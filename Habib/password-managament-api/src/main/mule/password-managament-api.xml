<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="e18b322e-a3a1-483c-9794-769d90e9f899" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<db:config name="Database_Config" doc:name="Database Config" doc:id="20886ada-3e07-4540-938f-fbeba1e1d402" >
		<db:generic-connection url="jdbc:postgresql://155.133.26.236:5432/userhabib" driverClassName="org.postgresql.Driver" user="habib" password="pass@habib"/>
	</db:config>
	<flow name="loginFlow" doc:id="c18f7cd8-fb96-43ee-b028-f6f2a4347b94" >
		<http:listener doc:name="Listener" doc:id="1d3e9e53-580b-454e-bc33-f36aa1f9d064" config-ref="HTTP_Listener_config" path="/sign in"/>
		<ee:transform doc:name="Transform Message" doc:id="27617e21-3a86-4573-b6b1-f4ad3443543b" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="initialPayload" ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<db:select doc:name="Select" doc:id="df72017c-0027-4654-95a8-9faa0503579e" config-ref="Database_Config">
			<db:sql ><![CDATA[select username , "password" , userid FROM public.registration
where username = :userName and "password" = :password]]></db:sql>
			<db:input-parameters ><![CDATA[#[payload]]]></db:input-parameters>
		</db:select>
		<ee:transform doc:name="Transform Message" doc:id="055000ec-4ce7-4ffe-8590-a80016915367" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Choice" doc:id="7f9dbf20-f605-49a4-b2db-7b4e679e79cd" >
			<when expression="#[!isEmpty(payload)]">
				<ee:transform doc:name="Transform Message" doc:id="baac4068-696b-4dac-b457-d23b189b3c73" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="userId" ><![CDATA[%dw 2.0
output application/json
---
payload.userid[0]]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<ee:transform doc:name="Transform Message" doc:id="55538611-2106-4725-9de5-d18d5941af5d" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="token" ><![CDATA[%dw 2.0
fun generateString(n: Number) = 
do {
  var x = ("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
  ---
  0 to (n-1) reduce (item, acc="") -> acc ++ x[ceil(random()*sizeOf(x))]
}
output application/json
---

 generateString(17)]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<db:update doc:name="Update" doc:id="bd318fb8-06e1-43a9-8e79-50c76d51f460" config-ref="Database_Config">
					<db:sql ><![CDATA[UPDATE public.registration SET "token"= :token, token_created_at= :token_created WHERE username= :username;]]></db:sql>
					<db:input-parameters ><![CDATA[#[{
	token_created: now() as LocalDateTime {format: "yyyy-MM-dd HH:mm:ss.SSS"},
	token: vars.token,
	username: vars.initialPayload.userName
}]]]></db:input-parameters>
				</db:update>
				<ee:transform doc:name="Transform Message" doc:id="839dc80f-b2c3-4c5a-86af-92b476bfb710" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{   
	userId: vars.userId as String,
	accessToken: "Bearer" ++ vars.token as String,
	message: "Login Successfully"
	
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<raise-error doc:name="Raise error" doc:id="685889fc-0243-40d8-98a2-87bf66fcb9a4" type="USER:INVALID" description="Invalid User Credentials"/>
			</otherwise>
		</choice>
	</flow>
	<flow name="Registrationflow" doc:id="7bea0eae-53e5-4e07-8114-77b3547f9bd6" >
		<http:listener doc:name="Listener" doc:id="1155fd15-beff-43b7-a254-a7b85f5d3b80" config-ref="HTTP_Listener_config" path="/sign up" allowedMethods="POST"/>
		<db:insert doc:name="Insert" doc:id="f51f4762-cdee-4d8f-88f3-549078503585" config-ref="Database_Config">
			<db:sql ><![CDATA[INSERT INTO public.registration (email, phonenumber, username, "password", firstname, lastname) 
VALUES(:email, :phoneNumber, :userName, :password, :firstName, :lastName);
]]></db:sql>
			<db:input-parameters ><![CDATA[#[payload]]]></db:input-parameters>
		</db:insert>
		<ee:transform doc:name="Transform Message" doc:id="5fbf1f72-2700-4ad4-92de-0c8250cdbfb4" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
"User Created Successfully"]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="tokenExpirationflow" doc:id="99d859b5-d7cd-467e-81a3-0ee3d7d3dfb8" >
		<scheduler doc:name="Scheduler" doc:id="0c8251e5-586a-427e-9011-e4962cece7e2" >
			<scheduling-strategy >
				<fixed-frequency />
			</scheduling-strategy>
		</scheduler>
		<db:select doc:name="Select" doc:id="a2b07478-6d64-4cdd-b21b-db8e08fa4b00" config-ref="Database_Config">
			<db:sql ><![CDATA[SELECT userid , token_created_at
FROM public.registration
WHERE token_created_at = (
    SELECT min(token_created_at) 
    FROM public.registration
);]]></db:sql>
		</db:select>
		<ee:transform doc:name="Transform Message" doc:id="86812b5f-a0ec-4994-b988-347c97dd5b48" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="tokenExpires" ><![CDATA[%dw 2.0
output application/json

var createdTime = (payload.token_created_at[0]
                  as LocalDateTime {format: "yyyy-MM-dd HH:mm:ss.SSS"}) 

var nowTime = now() as LocalDateTime {format: "yyyy-MM-dd HH:mm:ss.SSS"}
var diffMinutes = (nowTime - createdTime) as Number {unit: "minutes"}
---
diffMinutes >= 60]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="dbf8627b-32cf-4308-b2ba-29a5be51901b" >
			<when expression="#[vars.tokenExpires == true]">
				<db:update doc:name="Update" doc:id="c2bf57f8-97a1-4bf9-9702-a562eb181a2e" config-ref="Database_Config">
					<db:sql ><![CDATA[UPDATE registration
SET token = NULL,
    token_created_at = NULL
WHERE userId = :userId;]]></db:sql>
					<db:input-parameters ><![CDATA[#[{
	userId: payload.userid[0]
}]]]></db:input-parameters>
				</db:update>
			</when>
		</choice>
	</flow>
	<flow name="forgotpasswordflow" doc:id="b1069ec2-0d69-49f9-a91b-49ff8c54f6a7" >
		<http:listener doc:name="Listener" doc:id="87e4814a-e183-4576-b132-38ac792ef570" config-ref="HTTP_Listener_config" path="/forgetPassword"/>
		<db:update doc:name="Update" doc:id="2dd93c04-1501-4b43-b3fb-a38bcab787eb" config-ref="Database_Config">
			<db:sql ><![CDATA[UPDATE public.registration set "password"= :password 
WHERE email= :email;]]></db:sql>
			<db:input-parameters ><![CDATA[#[payload]]]></db:input-parameters>
		</db:update>
	</flow>
</mule>
